% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/devmode.R
\name{devmode}
\alias{devmode}
\alias{in_devmode}
\alias{with_devmode}
\alias{devmode_inform}
\alias{register_devmode_option}
\alias{get_devmode_option}
\title{Shiny Developer Mode}
\usage{
devmode(
  devmode = getOption("shiny.devmode", TRUE),
  verbose = getOption("shiny.devmode.verbose", TRUE)
)

in_devmode()

with_devmode(devmode, code, verbose = getOption("shiny.devmode.verbose", TRUE))

devmode_inform(
  message,
  .frequency = "regularly",
  .frequency_id = message,
  .file = stderr(),
  ...
)

register_devmode_option(option, message = NULL, on = NULL)

get_devmode_option(option, default = NULL, on = waiver(), message = waiver())
}
\arguments{
\item{devmode}{Logical value which should be set to \code{TRUE} to enable Shiny Developer Mode}

\item{verbose}{Logical value which should be set to \code{TRUE} display Shiny Developer messages}

\item{code}{Code to execute with the temporary Dev Mode options set}

\item{message}{Message to display once every 8 hours if \code{option} is not set and if \code{in_devmode()} returns \code{TRUE} and Dev Mode messages can be displayed. For \code{get_devmode_option()}, if \code{message = waiver()}, the registered \code{message} value be attempted to be displayed.}

\item{.frequency}{How frequently should the warning or message be
displayed? By default (\code{"always"}) it is displayed at each
time. If \code{"regularly"}, it is displayed once every 8 hours. If
\code{"once"}, it is displayed once per session.}

\item{.frequency_id}{A unique identifier for the warning or
message. This is used when \code{.frequency} is supplied to recognise
recurring conditions. This argument must be supplied if
\code{.frequency} is not set to \code{"always"}.}

\item{.file}{Where the message is printed. This should be a
connection or character string which will be passed to \code{\link[=cat]{cat()}}.

By default, \code{inform()} prints to standard output in interactive
sessions and standard error otherwise. This way IDEs can treat
messages distinctly from warnings and errors, and R scripts can
still filter out the messages easily by redirecting \code{stderr}. If
a sink is active, either on output or on messages, messages are
printed to \code{stderr}. This ensures consistency of behaviour in
interactive and non-interactive sessions.}

\item{...}{Parameters passed to \code{\link[rlang:abort]{rlang::inform()}}}

\item{option}{Option to look for in \code{options()}}

\item{on}{Default value to return if \code{in_devmode()} returns \code{TRUE}. For \code{get_devmode_option()}, if \code{on = waiver()}, the registered default \code{on} value will be used.}
}
\description{
\lifecycle{experimental}

Developer mode enables a number of options to make a developer's life easier, like enabling non-minified JS and printing messages about deprecated functions and options.

Please see the function descriptions for more details.
}
\section{Functions}{
\itemize{
\item \code{devmode}: Function to set two options to enable/disable Shiny Developer Mode and Developer messages

\item \code{in_devmode}: Determines if Shiny is in Developer Mode. If the \code{getOption("shiny.devmode")} is set to \code{TRUE} and not in testing inside \code{testthat}, then Shiny Developer Mode is enabled.

\item \code{with_devmode}: Temporarily set Shiny Developer Mode and Developer message verbosity

\item \code{devmode_inform}: If Shiny Developer Mode and verbosity are enabled, displays a message once every 8 hrs (by default)

\item \code{register_devmode_option}: Registers a Shiny Developer Mode option with an updated value and Developer message. This registration method allows package authors to write one message in a single location.

For example, the following Shiny Developer Mode options are registered:\if{html}{\out{<div class="r">}}\preformatted{# Reload the Shiny app when a sourced R file changes
register_devmode_option(
  "shiny.autoreload",
  "Turning on shiny autoreload. To disable, call `options(shiny.autoreload = FALSE)`",
  on = TRUE
)

# Use the unminified Shiny JavaScript file, `shiny.js`
register_devmode_option(
  "shiny.minified",
  "Using full shiny javascript file. To use the minified version, call `options(shiny.minified = TRUE)`",
  on = FALSE
)

# Display the full stack trace when errors occur during Shiny app execution
register_devmode_option(
  "shiny.fullstacktrace",
  "Turning on full stack trace. To disable, call `options(shiny.fullstacktrace = FALSE)`",
  on = TRUE
)
}\if{html}{\out{</div>}}

Other known, non-Shiny Developer Mode options:
\itemize{
\item Sass:
}\if{html}{\out{<div class="r">}}\preformatted{# Display the full stack trace when errors occur during Shiny app execution
register_devmode_option(
  "sass.cache",
  "Turning off sass cache. To use default caching, call `options(sass.cache = TRUE)`",
  on = FALSE
)
}\if{html}{\out{</div>}}

\item \code{get_devmode_option}: Provides a consistent way to change default \code{getOption()} behavior when Developer Mode is enabled. This method is very similar to \code{\link[=getOption]{getOption()}} where the globally set option takes precedence. However, when the global option is not set, \code{default} will be returned when \code{in_devmode()} is \code{FALSE}, or \code{on} will be returned if \code{in_devmode()} is \code{TRUE}.
}}

\section{Avoiding direct dependency on shiny}{


The methods explained in this documentation file act independently from the rest of Shiny but are included to provide blue prints for your own packages. If your package already has (or willing to take) a dependency on Shiny, we recommend using the exported methods for consistent behavior.

If your package can not take a dependency on Shiny, we recommending re-implementing two functions:

\enumerate{
\item \code{in_devmode()}: This function should return \code{TRUE} if \code{getOption("shiny.devmode")} is set. In addition, we strongly recommend that it also checks to make sure \code{testthat} is not testing.  This can be achieved using:\if{html}{\out{<div class="r">}}\preformatted{in_devmode <- function() \{
  isTRUE(getOption("shiny.devmode", FALSE)) &&
    !identical(Sys.getenv("TESTTHAT"), "true")
\}
}\if{html}{\out{</div>}}

\item \code{get_devmode_option(option, default, on, message)}:
This function should return the global \code{option} when it is set, similar to \code{getOption(option, default)}. When the global option \code{option} is not set, this function should return the default value (\code{default}) when \code{in_devmode()} is \code{FALSE} and the default Dev Mode value (\code{on}) when \code{in_devmode()} is \code{TRUE}. We strongly recommend displaying a message (\code{message}) to the developer once every 8 hours using \code{rlang::inform(message, .frequency = "regularly", .frequency_id = message, .file = stderr())} if returning the \code{on} default Dev Mode option value. This will keep the author up to date as to which behaviors are being altered. To allow developers a chance to disable Dev Mode messages, the message should be skipped if \code{getOption("shiny.devmode.verbose", TRUE)} returns \code{FALSE}.\if{html}{\out{<div class="r">}}\preformatted{get_devmode_option <- function(option, default = NULL, on = NULL, message = NULL) \{
  if (!in_devmode()) \{
    # Dev Mode disabled, act like `getOption()`
    return(getOption(option, default = default))
  \}
  # Notify developer
  if (getOption("shiny.devmode.verbose", TRUE) && !is.null(message)) \{
    rlang::inform(
      message = message,
      .frequency = "regularly",
      .frequency_id = message,
      .file = stderr()
    )
  \}
  # Return Dev Mode default value `on`
  getOption(option, default = on)
\}
}\if{html}{\out{</div>}}

}

The remaining functions in this file are used for author convenience and are not recommended for all reimplementation situations.
}

\examples{
# Enable Shiny Developer mode
devmode()

in_devmode() # TRUE/FALSE?

# Execute code in a temporary shiny dev mode
with_devmode(TRUE, in_devmode()) # TRUE

# Ex: Within shiny, we register the option "shiny.minified"
#   to default to `FALSE` when in Dev Mode
\dontrun{register_devmode_option(
  "shiny.minified",
  message = paste0(
    "Using full shiny javascript file. ",
    "To use the minified version, call `options(shiny.minified = TRUE)`"
  ),
  on = FALSE
)}

# Used within `shiny::runApp(launch.browser)`
get_devmode_option("shiny.minified", TRUE) # TRUE if Dev mode is off
is_minified <- with_devmode(TRUE, {
  get_devmode_option("shiny.minified", TRUE)
})
is_minified # FALSE

}
\keyword{internal}
